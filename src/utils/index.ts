import { jsPDF } from "jspdf";
import { Championship, Athlete, Group, Match, SetResult } from "../types/index";

// ‚úÖ CORRE√á√ÉO: Fun√ß√µes de formata√ß√£o com valida√ß√£o robusta
const isValidDate = (date: any): boolean => {
  if (!date) return false;
  const dateObj = date instanceof Date ? date : new Date(date);
  return dateObj instanceof Date && !isNaN(dateObj.getTime());
};

const safeParseDate = (date: any): Date | null => {
  if (!date) return null;

  // Se j√° √© um Date v√°lido
  if (date instanceof Date && isValidDate(date)) {
    return date;
  }

  // Tentar converter string/number para Date
  try {
    const parsed = new Date(date);
    return isValidDate(parsed) ? parsed : null;
  } catch {
    return null;
  }
};

export const formatDate = (date: Date | string | null | undefined): string => {
  const safeDate = safeParseDate(date);

  if (!safeDate) {
    console.warn("formatDate: Data inv√°lida recebida:", date);
    return "Data inv√°lida";
  }

  try {
    return new Intl.DateTimeFormat("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(safeDate);
  } catch (error) {
    console.error("formatDate: Erro ao formatar data:", error);
    return "Data inv√°lida";
  }
};

export const formatDateTime = (
  date: Date | string | null | undefined
): string => {
  const safeDate = safeParseDate(date);

  if (!safeDate) {
    console.warn("formatDateTime: Data inv√°lida recebida:", date);
    return "Data/hora inv√°lida";
  }

  try {
    return new Intl.DateTimeFormat("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    }).format(safeDate);
  } catch (error) {
    console.error("formatDateTime: Erro ao formatar data/hora:", error);
    return "Data/hora inv√°lida";
  }
};

export const getOrdinalPosition = (position: number): string => {
  return `${position}¬∫`;
};

export const formatMatchScore = (match: Match): string => {
  if (!match.sets || match.sets.length === 0) {
    return "0-0";
  }

  const sets = match.sets;
  let player1Sets = 0;
  let player2Sets = 0;

  sets.forEach((set) => {
    if (set.player1Score > set.player2Score) player1Sets++;
    else if (set.player2Score > set.player1Score) player2Sets++;
  });

  return `${player1Sets}-${player2Sets}`;
};

export const formatSetScore = (set: {
  player1Score: number;
  player2Score: number;
}): string => {
  return `${set.player1Score}-${set.player2Score}`;
};

// Cores para status
export const getStatusColor = (status: string): string => {
  switch (status) {
    case "created":
      return "bg-gray-100 text-gray-800";
    case "groups":
      return "bg-blue-100 text-blue-800";
    case "knockout":
      return "bg-orange-100 text-orange-800";
    case "completed":
      return "bg-green-100 text-green-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
};

// Fun√ß√£o para validar sets (consistente com types/index.ts)
export const isValidSet = (set: SetResult): boolean => {
  const { player1Score, player2Score } = set;

  // Verificar se ambos os scores s√£o n√∫meros v√°lidos
  if (isNaN(player1Score) || isNaN(player2Score)) return false;
  if (player1Score < 0 || player2Score < 0) return false;

  // Se ambos os scores s√£o 0, considerar inv√°lido
  if (player1Score === 0 && player2Score === 0) return false;

  // M√≠nimo de 11 pontos para vencer
  if (Math.max(player1Score, player2Score) < 11) return false;

  // Diferen√ßa m√≠nima de 2 pontos
  if (Math.abs(player1Score - player2Score) < 2) return false;

  // Se empatado em 10-10 ou mais, deve ter diferen√ßa de exatamente 2
  if (player1Score >= 10 && player2Score >= 10) {
    return Math.abs(player1Score - player2Score) === 2;
  }

  // Um dos jogadores deve ter pelo menos 11 e diferen√ßa de pelo menos 2
  return (
    (player1Score >= 11 && player1Score - player2Score >= 2) ||
    (player2Score >= 11 && player2Score - player1Score >= 2)
  );
};

// Fun√ß√£o principal para determinar vencedor da partida - CORRIGIDA E UNIFICADA
export const getMatchWinner = (
  sets: Array<{
    player1Score: number;
    player2Score: number;
    player1Id?: string;
    player2Id?: string;
  }>,
  bestOf: 3 | 5 | 7,
  player1Id?: string,
  player2Id?: string
): string | undefined => {
  if (sets.length === 0) return undefined;

  const setsToWin = bestOf === 3 ? 2 : bestOf === 5 ? 3 : 4;
  let player1Sets = 0;
  let player2Sets = 0;

  // Validar cada set antes de contar
  const validSets = sets.filter((set) => {
    const { player1Score, player2Score } = set;

    // Verificar se ambos os scores s√£o n√∫meros v√°lidos e n√£o negativos
    if (
      isNaN(player1Score) ||
      isNaN(player2Score) ||
      player1Score < 0 ||
      player2Score < 0
    ) {
      return false;
    }

    // Se ambos os scores s√£o 0, considerar inv√°lido
    if (player1Score === 0 && player2Score === 0) return false;

    // Verificar se o set √© v√°lido usando fun√ß√£o de valida√ß√£o
    return isValidSet({ player1Score, player2Score });
  });

  console.log(
    `üéØ [UTILS-WINNER] Calculando vencedor - BestOf: ${bestOf}, SetsToWin: ${setsToWin}, ValidSets: ${validSets.length}`
  );

  // Contar sets v√°lidos
  validSets.forEach((set) => {
    if (set.player1Score > set.player2Score) {
      player1Sets++;
    } else if (set.player2Score > set.player1Score) {
      player2Sets++;
    }
    console.log(
      `  Set: ${set.player1Score}-${set.player2Score} ‚Üí P1Sets: ${player1Sets}, P2Sets: ${player2Sets}`
    );
  });

  console.log(
    `üéØ [UTILS-WINNER] Resultado final: P1=${player1Sets} sets, P2=${player2Sets} sets`
  );

  // Verificar se algum jogador atingiu o n√∫mero necess√°rio de sets
  if (player1Sets >= setsToWin) {
    const winnerId = player1Id || sets[0]?.player1Id || "player1";
    console.log(`‚úÖ [UTILS-WINNER] Player1 venceu! ID: ${winnerId}`);
    return winnerId;
  } else if (player2Sets >= setsToWin) {
    const winnerId = player2Id || sets[0]?.player2Id || "player2";
    console.log(`‚úÖ [UTILS-WINNER] Player2 venceu! ID: ${winnerId}`);
    return winnerId;
  }

  console.log(`‚è≥ [UTILS-WINNER] Nenhum vencedor ainda - partida em andamento`);
  return undefined;
};

// Fun√ß√£o auxiliar para nomes de rodadas
const getRoundName = (rounds: number): string => {
  const roundNames: Record<number, string> = {
    1: "Final",
    2: "Semifinal",
    3: "Quartas",
    4: "Oitavas",
    5: "D√©cimo-sextos",
    6: "Trinta-e-dois-avos",
  };

  return roundNames[rounds] || `Rodada ${rounds}`;
};

// Gera√ß√£o de chaves mata-mata
export const generateMainKnockoutMatches = (
  qualifiedAthletes: Athlete[],
  bracketSize: number
): Match[] => {
  const matches: Match[] = [];

  // Separar cabe√ßas de chave dos demais classificados
  const seeded = qualifiedAthletes
    .filter((a) => a.isSeeded)
    .sort((a, b) => (a.seedNumber || 0) - (b.seedNumber || 0));

  const unseeded = qualifiedAthletes.filter((a) => !a.isSeeded);

  // Criar lista de atletas ordenados para a chave
  const orderedAthletes: (Athlete | null)[] = Array.from(
    { length: bracketSize },
    () => null
  );

  // Posicionar cabe√ßas de chave (distribui√ß√£o padr√£o)
  if (seeded.length > 0) orderedAthletes[0] = seeded[0]; // 1¬∫ cabe√ßa
  if (seeded.length > 1) orderedAthletes[bracketSize - 1] = seeded[1]; // 2¬∫ cabe√ßa
  if (seeded.length > 2)
    orderedAthletes[Math.floor(bracketSize / 2) - 1] = seeded[2]; // 3¬∫ cabe√ßa
  if (seeded.length > 3)
    orderedAthletes[Math.floor(bracketSize / 2)] = seeded[3]; // 4¬∫ cabe√ßa

  // Preencher com demais atletas
  let unseededIndex = 0;
  for (
    let i = 0;
    i < orderedAthletes.length && unseededIndex < unseeded.length;
    i++
  ) {
    if (orderedAthletes[i] === null) {
      orderedAthletes[i] = unseeded[unseededIndex++];
    }
  }

  // Gerar partidas da primeira rodada
  const rounds = Math.log2(bracketSize);
  const currentRoundName = getRoundName(rounds);

  // Criar partidas em pares
  for (let i = 0; i < orderedAthletes.length; i += 2) {
    if (orderedAthletes[i] && orderedAthletes[i + 1]) {
      const match: Match = {
        id: `knockout-${i / 2}`,
        player1Id: orderedAthletes[i]!.id,
        player2Id: orderedAthletes[i + 1]!.id,
        player1: orderedAthletes[i]!,
        player2: orderedAthletes[i + 1]!,
        sets: [],
        isCompleted: false,
        phase: "knockout",
        round: currentRoundName,
        position: i / 2,
        timeoutsUsed: {
          player1: false,
          player2: false,
        },
        createdAt: new Date(),
      };
      matches.push(match);
    }
  }

  return matches;
};

export const generateSecondDivisionMatches = (athletes: Athlete[]): Match[] => {
  const matches: Match[] = [];

  console.log("\nü•à [UTILS-2ND] === GERA√á√ÉO SEGUNDA DIVIS√ÉO ===");
  console.log("ü•à [UTILS-2ND] Atletas recebidos:", athletes.length);
  athletes.forEach((athlete, index) => {
    console.log(`  ${index + 1}. ${athlete.name} (ID: ${athlete.id})`);
  });

  // Valida√ß√£o inicial
  if (!athletes || athletes.length < 2) {
    console.log(
      "‚ùå [UTILS-2ND] Insuficientes atletas para segunda divis√£o:",
      athletes?.length || 0
    );
    return matches;
  }

  // ‚úÖ CORRE√á√ÉO: Melhor determina√ß√£o do tamanho da chave
  let bracketSize = 2;
  while (bracketSize < athletes.length) {
    bracketSize *= 2;
  }

  console.log(
    `üéØ [UTILS-2ND] Tamanho da chave determinado: ${bracketSize} (para ${athletes.length} atletas)`
  );

  // ‚úÖ CORRE√á√ÉO: Embaralhar atletas de forma mais robusta
  const shuffledAthletes = [...athletes]
    .map((athlete) => ({ athlete, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map((item) => item.athlete);

  console.log("üîÄ [UTILS-2ND] Atletas embaralhados:");
  shuffledAthletes.forEach((athlete, index) => {
    console.log(`  ${index + 1}. ${athlete.name}`);
  });

  // ‚úÖ CORRE√á√ÉO: Criar array ordenado mais robusto
  const orderedAthletes: (Athlete | null)[] = Array.from(
    { length: bracketSize },
    (_, index) =>
      index < shuffledAthletes.length ? shuffledAthletes[index] : null
  );

  console.log("üìã [UTILS-2ND] Posi√ß√µes na chave:");
  orderedAthletes.forEach((athlete, index) => {
    console.log(`  Posi√ß√£o ${index + 1}: ${athlete?.name || "null"}`);
  });

  // ‚úÖ CORRE√á√ÉO: Determina√ß√£o mais robusta da rodada inicial
  const rounds = Math.log2(bracketSize);
  const roundNames = {
    1: "Final 2¬™ Div",
    2: "Semifinal 2¬™ Div",
    3: "Quartas 2¬™ Div",
    4: "Oitavas 2¬™ Div",
    5: "D√©cimo-sextos 2¬™ Div",
  };

  const currentRoundName =
    roundNames[rounds as keyof typeof roundNames] || "Oitavas 2¬™ Div";

  console.log(
    `üèÜ [UTILS-2ND] Rodada inicial: ${currentRoundName} (${rounds} rodadas)`
  );

  // ‚úÖ CORRE√á√ÉO: Gera√ß√£o de partidas mais robusta
  let matchCount = 0;
  for (let i = 0; i < orderedAthletes.length; i += 2) {
    const player1 = orderedAthletes[i];
    const player2 = orderedAthletes[i + 1];

    // ‚úÖ S√≥ criar partida se ambos os jogadores existem
    if (player1 && player2) {
      const matchId = `second-div-${Date.now()}-${Math.random()
        .toString(36)
        .substr(2, 9)}-${matchCount}`;

      const match: Match = {
        id: matchId,
        player1Id: player1.id,
        player2Id: player2.id,
        player1: player1,
        player2: player2,
        sets: [],
        isCompleted: false,
        phase: "knockout",
        round: currentRoundName,
        position: matchCount,
        timeoutsUsed: {
          player1: false,
          player2: false,
        },
        createdAt: new Date(),
      };

      matches.push(match);
      matchCount++;

      console.log(`‚úÖ [UTILS-2ND] Partida ${matchCount} criada:`);
      console.log(`    ID: ${matchId}`);
      console.log(`    Jogadores: ${player1.name} vs ${player2.name}`);
      console.log(`    Rodada: ${currentRoundName}`);
      console.log(`    Posi√ß√£o: ${matchCount - 1}`);
    } else if (player1 && !player2) {
      // ‚úÖ CORRE√á√ÉO: Player1 avan√ßa automaticamente se n√£o h√° oponente
      console.log(
        `‚≠ê [UTILS-2ND] ${player1.name} avan√ßa automaticamente (sem oponente)`
      );
      // Nota: Em uma implementa√ß√£o mais avan√ßada, poderia criar um "bye" ou avan√ßar diretamente
    }
  }

  console.log(
    `üéâ [UTILS-2ND] Gera√ß√£o conclu√≠da: ${matches.length} partidas criadas`
  );
  console.log("ü•à [UTILS-2ND] === FIM GERA√á√ÉO SEGUNDA DIVIS√ÉO ===\n");

  return matches;
};
export const validateSecondDivisionMatches = (matches: Match[]): boolean => {
  console.log("\nüîç [VALIDATE-2ND] Validando partidas da segunda divis√£o...");

  const issues: string[] = [];

  matches.forEach((match, index) => {
    // Verificar estrutura b√°sica
    if (!match.id) {
      issues.push(`Partida ${index + 1}: ID ausente`);
    }

    if (!match.player1Id || !match.player2Id) {
      issues.push(`Partida ${index + 1}: IDs dos jogadores ausentes`);
    }

    if (!match.player1 || !match.player2) {
      issues.push(`Partida ${index + 1}: Objetos dos jogadores ausentes`);
    }

    if (match.phase !== "knockout") {
      issues.push(`Partida ${index + 1}: Fase incorreta (${match.phase})`);
    }

    if (!match.round?.includes("2¬™ Div")) {
      issues.push(`Partida ${index + 1}: Rodada incorreta (${match.round})`);
    }

    // Verificar duplica√ß√£o de IDs
    const duplicateId = matches.findIndex(
      (m, i) => i !== index && m.id === match.id
    );
    if (duplicateId !== -1) {
      issues.push(
        `Partida ${index + 1}: ID duplicado com partida ${duplicateId + 1}`
      );
    }
  });

  if (issues.length === 0) {
    console.log("‚úÖ [VALIDATE-2ND] Todas as partidas s√£o v√°lidas");
    return true;
  } else {
    console.log("‚ùå [VALIDATE-2ND] Problemas encontrados:");
    issues.forEach((issue, index) => {
      console.log(`  ${index + 1}. ${issue}`);
    });
    return false;
  }
};

// ‚úÖ FUN√á√ÉO DE TESTE: Simular gera√ß√£o da segunda divis√£o
export const testSecondDivisionGeneration = () => {
  console.log("\nüß™ [TEST-2ND] === TESTE DE GERA√á√ÉO ===");

  // Criar atletas de teste
  const testAthletes: Athlete[] = [
    { id: "test-1", name: "Atleta A" },
    { id: "test-2", name: "Atleta B" },
    { id: "test-3", name: "Atleta C" },
    { id: "test-4", name: "Atleta D" },
    { id: "test-5", name: "Atleta E" },
    { id: "test-6", name: "Atleta F" },
  ];

  console.log("üß™ [TEST-2ND] Testando com 6 atletas eliminados...");

  // Testar gera√ß√£o
  const matches = generateSecondDivisionMatches(testAthletes);

  // Validar resultado
  const isValid = validateSecondDivisionMatches(matches);

  console.log(`üß™ [TEST-2ND] Resultado: ${matches.length} partidas geradas`);
  console.log(
    `üß™ [TEST-2ND] Valida√ß√£o: ${isValid ? "‚úÖ Passou" : "‚ùå Falhou"}`
  );

  // Teste com 2 atletas
  console.log("\nüß™ [TEST-2ND] Testando com 2 atletas eliminados...");
  const matches2 = generateSecondDivisionMatches(testAthletes.slice(0, 2));
  console.log(`üß™ [TEST-2ND] Resultado: ${matches2.length} partidas geradas`);

  // Teste com 1 atleta (deve falhar)
  console.log("\nüß™ [TEST-2ND] Testando com 1 atleta (deve falhar)...");
  const matches3 = generateSecondDivisionMatches(testAthletes.slice(0, 1));
  console.log(`üß™ [TEST-2ND] Resultado: ${matches3.length} partidas geradas`);

  console.log("üß™ [TEST-2ND] === FIM TESTE ===\n");

  return {
    test6Athletes: { matches: matches.length, valid: isValid },
    test2Athletes: { matches: matches2.length },
    test1Athlete: { matches: matches3.length },
  };
};

// ‚úÖ CORRE√á√ÉO: Usar consistentemente winnerId ao inv√©s de winner
export const generateNextRoundMatches = (
  currentRoundMatches: Match[],
  round: string,
  allAthletes: Athlete[],
  bestOf: 3 | 5 | 7 = 5 // Par√¢metro adicionado com valor padr√£o
): Match[] => {
  const matches: Match[] = [];

  // Verificar se todas as partidas da rodada atual foram completadas
  const completedMatches = currentRoundMatches.filter((m) => m.isCompleted);
  if (completedMatches.length !== currentRoundMatches.length) {
    console.log(
      `‚ùå [GENERATE] Ainda h√° partidas pendentes na rodada anterior (${completedMatches.length}/${currentRoundMatches.length})`
    );
    return matches; // Ainda h√° partidas pendentes
  }

  console.log(`‚úÖ [GENERATE] Gerando pr√≥xima rodada: ${round}`, {
    completedMatches: completedMatches.length,
    round,
  });

  // ‚úÖ L√ìGICA ESPECIAL PARA DISPUTA DE TERCEIRO LUGAR
  if (round.includes("3¬∫ Lugar")) {
    console.log(
      "ü•â [GENERATE] Gerando disputa de terceiro lugar - usando PERDEDORES das semifinais"
    );

    // Para terceiro lugar, usar os PERDEDORES das semifinais
    const loserIds: string[] = [];

    completedMatches.forEach((match) => {
      // ‚úÖ CORRE√á√ÉO: Usar winnerId consistentemente
      let winnerId = match.winnerId;
      if (!winnerId && match.sets && match.sets.length > 0) {
        winnerId = getMatchWinner(
          match.sets,
          bestOf,
          match.player1Id,
          match.player2Id
        );
      }

      // Identificar o perdedor da partida
      const loserId =
        winnerId === match.player1Id ? match.player2Id : match.player1Id;

      if (loserId) {
        loserIds.push(loserId);
        const loserName =
          winnerId === match.player1Id
            ? match.player2?.name
            : match.player1?.name;
        console.log(
          `  ü•â [GENERATE] Perdedor encontrado: ${loserName} (ID: ${loserId})`
        );
      }
    });

    // Criar partida de 3¬∫ lugar com os dois perdedores
    if (loserIds.length >= 2) {
      const loser1 = allAthletes.find((a) => a.id === loserIds[0]);
      const loser2 = allAthletes.find((a) => a.id === loserIds[1]);

      if (loser1 && loser2) {
        const thirdPlaceMatch: Match = {
          id: `${round
            .replace(/\s+/g, "-")
            .toLowerCase()}-${Date.now()}-${Math.random()
            .toString(36)
            .substr(2, 5)}`,
          player1Id: loser1.id,
          player2Id: loser2.id,
          player1: loser1,
          player2: loser2,
          sets: [],
          isCompleted: false,
          phase: "knockout",
          round: round,
          isThirdPlace: true, // ‚úÖ MARCAR COMO TERCEIRO LUGAR
          position: 0,
          timeoutsUsed: {
            player1: false,
            player2: false,
          },
          createdAt: new Date(),
        };
        matches.push(thirdPlaceMatch);
        console.log(
          `‚úÖ [GENERATE] Partida de 3¬∫ lugar criada: ${loser1.name} vs ${loser2.name}`
        );
      }
    }
  } else {
    // ‚úÖ L√ìGICA PARA FINAL E OUTRAS RODADAS (usar VENCEDORES)
    console.log("üèÜ [GENERATE] Gerando rodada normal - usando VENCEDORES");

    // Coletar todos os vencedores - ‚úÖ USAR winnerId CONSISTENTEMENTE
    const winnerIds: string[] = [];

    completedMatches.forEach((match, index) => {
      let winnerId = match.winnerId;

      // Se n√£o houver winnerId definido, calcular usando getMatchWinner
      if (!winnerId && match.sets && match.sets.length > 0) {
        console.log(
          `‚ö†Ô∏è [GENERATE] Campo winnerId n√£o definido para partida ${match.id}, recalculando...`
        );
        winnerId = getMatchWinner(
          match.sets,
          bestOf,
          match.player1Id,
          match.player2Id
        );
        console.log(`   Resultado do rec√°lculo: ${winnerId}`);
      }

      if (winnerId) {
        winnerIds.push(winnerId);
        const winnerName =
          winnerId === match.player1Id
            ? match.player1?.name
            : match.player2?.name;
        console.log(
          `  ‚úÖ [GENERATE] Partida ${
            index + 1
          } - Vencedor: ${winnerName} (ID: ${winnerId})`
        );
      } else {
        console.log(
          `  ‚ùå [GENERATE] Nenhum vencedor encontrado para partida ${
            index + 1
          }: ${match.player1?.name} vs ${match.player2?.name}`
        );
      }
    });

    console.log(
      `üìä [GENERATE] Total de vencedores encontrados: ${winnerIds.length}`
    );

    // Criar partidas com os vencedores em pares
    for (let i = 0; i < winnerIds.length; i += 2) {
      if (winnerIds[i] && winnerIds[i + 1]) {
        const winner1 = allAthletes.find((a) => a.id === winnerIds[i]);
        const winner2 = allAthletes.find((a) => a.id === winnerIds[i + 1]);

        if (winner1 && winner2) {
          const newMatch: Match = {
            id: `${round
              .replace(/\s+/g, "-")
              .toLowerCase()}-${Date.now()}-${Math.random()
              .toString(36)
              .substr(2, 5)}-${i / 2}`,
            player1Id: winner1.id,
            player2Id: winner2.id,
            player1: winner1,
            player2: winner2,
            sets: [],
            isCompleted: false,
            phase: "knockout",
            round: round,
            position: i / 2,
            timeoutsUsed: {
              player1: false,
              player2: false,
            },
            createdAt: new Date(),
          };
          matches.push(newMatch);

          console.log(
            `‚úÖ [GENERATE] Partida ${round} criada: ${winner1.name} vs ${winner2.name} (ID: ${newMatch.id})`
          );
        }
      }
    }
  }

  console.log(
    `üìä [GENERATE] Total de partidas criadas para ${round}: ${matches.length}`
  );
  return matches;
};

// Gera√ß√£o de s√∫mulas em PDF
export const generateMatchSheet = (
  match: Match,
  championship: Championship
): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;

  // Cabe√ßalho
  doc.setFontSize(16);
  doc.text("CONFEDERA√á√ÉO BRASILEIRA DE T√äNIS DE MESA", pageWidth / 2, 20, {
    align: "center",
  });
  doc.setFontSize(14);
  doc.text("S√öMULA OFICIAL", pageWidth / 2, 30, { align: "center" });

  // Informa√ß√µes do campeonato
  doc.setFontSize(12);
  doc.text(`Campeonato: ${championship.name}`, 20, 50);
  doc.text(`Data: ${formatDate(new Date())}`, 20, 70);

  // Informa√ß√µes da partida
  doc.text(`Partida: ${match.player1?.name} vs ${match.player2?.name}`, 20, 90);
  doc.text(
    `Fase: ${match.phase === "groups" ? "Grupos" : "Mata-mata"}`,
    20,
    100
  );
  if (match.groupId) {
    const group = championship.groups.find((g) => g.id === match.groupId);
    doc.text(`Grupo: ${group?.name}`, 20, 110);
  }

  // Tabela de sets
  const startY = 130;
  const cellHeight = 10;
  const colWidths = [30, 40, 40, 40];

  // Cabe√ßalho da tabela
  doc.rect(20, startY, colWidths[0], cellHeight);
  doc.rect(20 + colWidths[0], startY, colWidths[1], cellHeight);
  doc.rect(20 + colWidths[0] + colWidths[1], startY, colWidths[2], cellHeight);
  doc.rect(
    20 + colWidths[0] + colWidths[1] + colWidths[2],
    startY,
    colWidths[3],
    cellHeight
  );

  doc.text("Set", 25, startY + 7);
  doc.text(
    match.player1?.name.substring(0, 15) || "Jogador 1",
    25 + colWidths[0],
    startY + 7
  );
  doc.text(
    match.player2?.name.substring(0, 15) || "Jogador 2",
    25 + colWidths[0] + colWidths[1],
    startY + 7
  );
  doc.text(
    "Vencedor",
    25 + colWidths[0] + colWidths[1] + colWidths[2],
    startY + 7
  );

  // Linhas para sets
  const maxSets = championship.groupsBestOf;
  for (let i = 0; i < maxSets; i++) {
    const y = startY + (i + 1) * cellHeight;
    doc.rect(20, y, colWidths[0], cellHeight);
    doc.rect(20 + colWidths[0], y, colWidths[1], cellHeight);
    doc.rect(20 + colWidths[0] + colWidths[1], y, colWidths[2], cellHeight);
    doc.rect(
      20 + colWidths[0] + colWidths[1] + colWidths[2],
      y,
      colWidths[3],
      cellHeight
    );

    doc.text(`${i + 1}¬∫`, 25, y + 7);
  }

  // Resultado Final
  const resultY = startY + (maxSets + 2) * cellHeight + 20;
  doc.text("Resultado Final:", 20, resultY);
  doc.text("Vencedor:", 20, resultY + 15);

  // Assinaturas
  const signY = resultY + 40;
  doc.text("_____________________", 20, signY);
  doc.text("√Årbitro", 30, signY + 10);

  doc.text("_____________________", 120, signY);
  doc.text("Jogador 1", 130, signY + 10);

  doc.text("_____________________", 20, signY + 30);
  doc.text("Mes√°rio", 30, signY + 40);

  doc.text("_____________________", 120, signY + 30);
  doc.text("Jogador 2", 130, signY + 40);

  // Observa√ß√µes
  doc.text("Observa√ß√µes:", 20, signY + 60);
  doc.line(20, signY + 70, pageWidth - 20, signY + 70);
  doc.line(20, signY + 80, pageWidth - 20, signY + 80);
  doc.line(20, signY + 90, pageWidth - 20, signY + 90);

  // Salvar PDF
  doc.save(`sumula_${match.player1?.name}_vs_${match.player2?.name}.pdf`);
};

// Gera√ß√£o de relat√≥rio de classifica√ß√£o do grupo
export const generateGroupReport = (
  group: Group,
  championship: Championship
): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;

  // Cabe√ßalho
  doc.setFontSize(16);
  doc.text("CONFEDERA√á√ÉO BRASILEIRA DE T√äNIS DE MESA", pageWidth / 2, 20, {
    align: "center",
  });
  doc.setFontSize(14);
  doc.text(`CLASSIFICA√á√ÉO - ${group.name}`, pageWidth / 2, 30, {
    align: "center",
  });

  // Informa√ß√µes do campeonato
  doc.setFontSize(12);
  doc.text(`Campeonato: ${championship.name}`, 20, 50);
  doc.text(`Data: ${formatDate(new Date())}`, 20, 70);

  // Tabela de classifica√ß√£o
  const startY = 90;
  const cellHeight = 8;
  const colWidths = [15, 60, 20, 20, 20, 25, 25];

  // Cabe√ßalho da tabela
  const headers = ["Pos", "Atleta", "J", "V", "D", "Dif Sets", "Dif Pts"];
  let x = 20;
  headers.forEach((header, index) => {
    doc.rect(x, startY, colWidths[index], cellHeight);
    doc.text(header, x + 2, startY + 6);
    x += colWidths[index];
  });

  // Dados dos atletas
  group.standings.forEach((standing, index) => {
    const y = startY + (index + 1) * cellHeight;
    x = 20;

    const data = [
      getOrdinalPosition(standing.position),
      standing.athlete.name.substring(0, 25),
      standing.matches.toString(),
      standing.wins.toString(),
      standing.losses.toString(),
      standing.setsDiff >= 0
        ? `+${standing.setsDiff}`
        : standing.setsDiff.toString(),
      standing.pointsDiff >= 0
        ? `+${standing.pointsDiff}`
        : standing.pointsDiff.toString(),
    ];

    data.forEach((value, colIndex) => {
      doc.rect(x, y, colWidths[colIndex], cellHeight);
      doc.text(value, x + 2, y + 6);
      x += colWidths[colIndex];
    });
  });

  // Qualificados
  const qualifiedY = startY + (group.standings.length + 2) * cellHeight;
  doc.text("Qualificados para a pr√≥xima fase:", 20, qualifiedY);

  group.standings
    .filter((s) => s.qualified)
    .forEach((standing, index) => {
      doc.text(
        `${index + 1}. ${standing.athlete.name}`,
        20,
        qualifiedY + 10 + index * 8
      );
    });

  // Salvar PDF
  doc.save(`classificacao_${group.name.toLowerCase()}.pdf`);
};

// Gera√ß√£o de chave de elimina√ß√£o
export const generateKnockoutBracket = (championship: Championship): void => {
  const doc = new jsPDF("landscape");

  // Cabe√ßalho
  doc.setFontSize(16);
  doc.text("CHAVE DE ELIMINA√á√ÉO", doc.internal.pageSize.width / 2, 20, {
    align: "center",
  });
  doc.setFontSize(14);
  doc.text(championship.name, doc.internal.pageSize.width / 2, 30, {
    align: "center",
  });

  // TODO: Implementar desenho da chave
  // Por ora, apenas uma implementa√ß√£o b√°sica
  doc.setFontSize(12);
  doc.text("Chave em desenvolvimento...", 50, 60);

  doc.save(`chave_${championship.name.toLowerCase().replace(/\s+/g, "_")}.pdf`);
};

// Valida√ß√£o de dados
export const validateAthlete = (athlete: Partial<Athlete>): string[] => {
  const errors: string[] = [];

  if (!athlete.name?.trim()) {
    errors.push("Nome √© obrigat√≥rio");
  }

  if (athlete.name && athlete.name.trim().length < 2) {
    errors.push("Nome deve ter pelo menos 2 caracteres");
  }

  return errors;
};

// Utilit√°rios para localStorage
export const saveToLocalStorage = (key: string, data: unknown): void => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (error) {
    console.error("Erro ao salvar no localStorage:", error);
  }
};

export const loadFromLocalStorage = <T>(key: string, defaultValue: T): T => {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.error("Erro ao carregar do localStorage:", error);
    return defaultValue;
  }
};

// Utilit√°rios para exporta√ß√£o de dados
export const exportToJSON = <T>(data: T, filename: string): void => {
  const jsonString = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonString], { type: "application/json" });
  const url = URL.createObjectURL(blob);

  const link = document.createElement("a");
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  URL.revokeObjectURL(url);
};

// Utilit√°rios para c√°lculos estat√≠sticos - ‚úÖ CORRIGIDO
export const calculateTournamentStats = (championship: Championship) => {
  // ‚úÖ CORRE√á√ÉO: Incluir TODAS as partidas, incluindo mata-mata da segunda divis√£o
  const allMatches = championship.groups.flatMap((group) => group.matches);

  // Filtrar apenas partidas v√°lidas (com jogadores definidos)
  const validMatches = allMatches.filter(
    (match) =>
      match.player1?.id &&
      match.player2?.id &&
      match.player1.id !== match.player2.id
  );

  const totalMatches = validMatches.length;
  const completedMatches = validMatches.filter(
    (match) => match.isCompleted
  ).length;

  // ‚úÖ CORRE√á√ÉO: Garantir que o progresso nunca ultrapasse 100%
  const progress =
    totalMatches > 0
      ? Math.min(100, Math.round((completedMatches / totalMatches) * 100))
      : 0;

  // ‚úÖ SEPARAR estat√≠sticas por fase
  const groupMatches = validMatches.filter((match) => match.phase === "groups");
  const knockoutMatches = validMatches.filter(
    (match) => match.phase === "knockout"
  );
  const mainKnockoutMatches = knockoutMatches.filter(
    (m) => !m.round?.includes("2¬™ Div")
  );
  const secondDivMatches = knockoutMatches.filter((m) =>
    m.round?.includes("2¬™ Div")
  );

  // ‚úÖ CORRE√á√ÉO: Contar apenas grupos com partidas v√°lidas
  const validGroups = championship.groups.filter((group) =>
    group.matches.some(
      (match) =>
        match.player1?.id &&
        match.player2?.id &&
        match.player1.id !== match.player2.id &&
        match.phase === "groups"
    )
  );

  const groupsCompleted = validGroups.filter((group) => {
    const groupValidMatches = group.matches.filter(
      (match) =>
        match.player1?.id &&
        match.player2?.id &&
        match.player1.id !== match.player2.id &&
        match.phase === "groups"
    );
    return (
      groupValidMatches.length > 0 &&
      groupValidMatches.every((match) => match.isCompleted)
    );
  }).length;

  const totalGroups = validGroups.length;
  const groupsProgress =
    totalGroups > 0
      ? Math.min(100, Math.round((groupsCompleted / totalGroups) * 100))
      : 0;

  console.log("üìä [STATS] Estat√≠sticas recalculadas:", {
    totalMatches,
    groupMatches: groupMatches.length,
    knockoutMatches: knockoutMatches.length,
    mainKnockoutMatches: mainKnockoutMatches.length,
    secondDivMatches: secondDivMatches.length,
    completedMatches,
    progress,
    validGroups: totalGroups,
    groupsCompleted,
    groupsProgress,
  });

  return {
    totalMatches,
    completedMatches,
    pendingMatches: Math.max(0, totalMatches - completedMatches),
    progress,
    groupsCompleted,
    totalGroups,
    groupsProgress,
    // ‚úÖ NOVO: Estat√≠sticas detalhadas
    groupMatches: groupMatches.length,
    knockoutMatches: knockoutMatches.length,
    mainKnockoutMatches: mainKnockoutMatches.length,
    secondDivMatches: secondDivMatches.length,
    groupMatchesCompleted: groupMatches.filter((m) => m.isCompleted).length,
    knockoutMatchesCompleted: knockoutMatches.filter((m) => m.isCompleted)
      .length,
  };
};

// ‚úÖ FUN√á√ÉO PARA CRIAR DADOS DE TESTE COMPLETOS
export const createTestChampionshipData = () => {
  // Lista de nomes realistas para teste
  const testAthletes = [
    "Jo√£o Silva",
    "Maria Santos",
    "Pedro Oliveira",
    "Ana Costa",
    "Carlos Ferreira",
    "Lucia Rodrigues",
    "Bruno Almeida",
    "Fernanda Lima",
    "Rafael Santos",
    "Julia Pereira",
    "Diego Souza",
    "Camila Barbosa",
    "Lucas Martins",
    "Beatriz Castro",
    "Marcos Ribeiro",
    "Amanda Rocha",
    "Thiago Carvalho",
    "Leticia Gomes",
    "Rodrigo Dias",
    "Gabriela Nunes",
    "Anderson Moura",
    "Carolina Lopes",
    "Felipe Cardoso",
    "Renata Freitas",
  ];

  const config = {
    name: "Campeonato de Teste - TM Club",
    date: new Date(),
    groupSize: 4 as const,
    qualificationSpotsPerGroup: 2,
    groupsBestOf: 5 as const,
    knockoutBestOf: 5 as const,
    hasThirdPlace: true,
    hasRepechage: true,
  };

  const athletes = testAthletes.slice(0, 18).map((name, index) => ({
    id: `test-athlete-${index}`,
    name,
    isSeeded: index < 4, // Primeiros 4 s√£o cabe√ßas de chave
    seedNumber: index < 4 ? index + 1 : undefined,
  }));

  return { config, athletes };
};

// ‚úÖ FUN√á√ÉO PARA GERAR RESULTADOS DE TESTE REALISTAS
export const generateTestMatchResult = (bestOf: 3 | 5 | 7 = 5) => {
  const setsToWin = bestOf === 3 ? 2 : bestOf === 5 ? 3 : 4;
  const sets: { player1Score: number; player2Score: number }[] = [];
  let player1Sets = 0;
  let player2Sets = 0;

  // Tipos de sets realistas
  const setTypes = [
    {
      type: "normal",
      weight: 0.5,
      scores: [
        [11, 8],
        [11, 6],
        [11, 9],
        [11, 7],
        [11, 5],
      ],
    },
    {
      type: "close",
      weight: 0.3,
      scores: [
        [11, 9],
        [12, 10],
        [13, 11],
        [14, 12],
      ],
    },
    {
      type: "tight",
      weight: 0.2,
      scores: [
        [15, 13],
        [16, 14],
        [17, 15],
        [18, 16],
      ],
    },
  ];

  const generateSet = () => {
    const random = Math.random();
    let cumulativeWeight = 0;
    let selectedType = setTypes[0];

    for (const type of setTypes) {
      cumulativeWeight += type.weight;
      if (random <= cumulativeWeight) {
        selectedType = type;
        break;
      }
    }

    const scores = selectedType.scores;
    const scoreIndex = Math.floor(Math.random() * scores.length);
    const [score1, score2] = scores[scoreIndex];

    // 50% chance de inverter o resultado
    if (Math.random() < 0.5) {
      return { player1Score: score1, player2Score: score2 };
    } else {
      return { player1Score: score2, player2Score: score1 };
    }
  };

  // Gerar sets at√© um jogador vencer
  while (player1Sets < setsToWin && player2Sets < setsToWin) {
    const set = generateSet();
    sets.push(set);

    if (set.player1Score > set.player2Score) {
      player1Sets++;
    } else {
      player2Sets++;
    }
  }

  return {
    sets,
    timeouts: {
      player1: Math.random() < 0.2,
      player2: Math.random() < 0.2,
    },
  };
};

// Utilit√°rios para manipula√ß√£o de strings
export const slugify = (text: string): string => {
  return text
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // Remove acentos
    .replace(/[^a-z0-9 -]/g, "") // Remove caracteres especiais
    .replace(/\s+/g, "-") // Substitui espa√ßos por h√≠fens
    .replace(/-+/g, "-") // Remove h√≠fens duplicados
    .trim();
};

// ‚úÖ NOVA FUN√á√ÉO: Gerenciar cache de abas do bracket
export const clearBracketTabCache = (championshipId?: string): void => {
  if (typeof window === "undefined") return;

  try {
    if (championshipId) {
      localStorage.removeItem(`bracket-tab-${championshipId}`);
    } else {
      // Limpar todos os caches de abas
      Object.keys(localStorage).forEach((key) => {
        if (key.startsWith("bracket-tab-")) {
          localStorage.removeItem(key);
        }
      });
    }
  } catch (error) {
    console.warn("Erro ao limpar cache de abas:", error);
  }
};

export const getBracketTabCache = (championshipId: string): string | null => {
  if (typeof window === "undefined") return null;

  try {
    return localStorage.getItem(`bracket-tab-${championshipId}`);
  } catch (error) {
    console.warn("Erro ao recuperar cache de aba:", error);
    return null;
  }
};

export const setBracketTabCache = (
  championshipId: string,
  tab: string
): void => {
  if (typeof window === "undefined") return;

  try {
    localStorage.setItem(`bracket-tab-${championshipId}`, tab);
  } catch (error) {
    console.warn("Erro ao salvar cache de aba:", error);
  }
};

// ‚úÖ FUN√á√ÉO APRIMORADA: Gerenciar cache do store de forma segura
export const clearStoreCache = (): void => {
  try {
    // Acessar o store e limpar cache se dispon√≠vel
    if (typeof window !== "undefined" && (window as any).championshipStore) {
      const store = (window as any).championshipStore;
      const state = store.getState();

      if (
        state.invalidateCache &&
        typeof state.invalidateCache === "function"
      ) {
        state.invalidateCache();
        console.log("‚úÖ Cache do store limpo com sucesso");
      }
    }
  } catch (error) {
    console.warn("Erro ao limpar cache do store:", error);
  }
};

// ‚úÖ NOVA FUN√á√ÉO: Converter qualquer valor para timestamp seguro
export const getSafeTimestamp = (date: any): number => {
  try {
    if (!date) return Date.now();

    // Se j√° √© um n√∫mero (timestamp)
    if (typeof date === "number" && !isNaN(date)) {
      return date;
    }

    // Se √© um objeto Date v√°lido
    if (date instanceof Date && !isNaN(date.getTime())) {
      return date.getTime();
    }

    // Se √© uma string, tentar converter
    if (typeof date === "string") {
      const parsed = new Date(date);
      if (!isNaN(parsed.getTime())) {
        return parsed.getTime();
      }
    }

    // Fallback: usar timestamp atual
    return Date.now();
  } catch (error) {
    console.warn("getSafeTimestamp: Erro ao processar data:", error);
    return Date.now();
  }
};

// ‚úÖ FUN√á√ÉO APRIMORADA: Formata√ß√£o de data mais robusta
export const formatDateSafe = (date: any): string => {
  const safeDate = safeParseDate(date);

  if (!safeDate) {
    return "Data inv√°lida";
  }

  try {
    return new Intl.DateTimeFormat("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(safeDate);
  } catch (error) {
    console.error("formatDateSafe: Erro ao formatar:", error);
    return "Data inv√°lida";
  }
};

// ‚úÖ NOVA FUN√á√ÉO: Validar se um objeto tem propriedades de data v√°lidas
export const hasValidDateProperty = (
  obj: any,
  propertyName: string
): boolean => {
  try {
    const value = obj?.[propertyName];
    return safeParseDate(value) !== null;
  } catch {
    return false;
  }
};
